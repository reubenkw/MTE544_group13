import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from utilities import FileReader
from mapUtilities import mapManipulator
import rclpy

def plot_planning():
    # plot map
    rclpy.init()
    map_utilities = mapManipulator(laser_sig=0.17)
    width, height, max_value, pixels = map_utilities.read_pgm("room.pgm")
    map_data = np.array(pixels, dtype=np.uint8).reshape((height, width))

    imgplot = plt.imshow(map_data, cmap="gray", vmin=0, vmax=max_value)
    #plt.show()
    
    # plot actual path
    headers, values=FileReader("robotPose.csv").read_file()
    values = np.array(values)
    
    # first_stamp=values[0][-1]
    # time_list = values[:, -1] - first_stamp

    print(values[:, 0], values[:, 1])
    real_on_map = [map_utilities.position_2_cell((val[0], val[1])) for val in values]
    plt.plot(*zip(*real_on_map), label="actual path")
    
    ideal = np.array(
        [(-2.0, -0.5299999999999998), (-1.9500000000000002, -0.5299999999999998), (-1.9000000000000001, -0.5299999999999998), (-1.85, -0.5299999999999998), (-1.8, -0.48), (-1.75, -0.43000000000000016), (-1.7000000000000002, -0.3799999999999999), (-1.6500000000000001, -0.3799999999999999), (-1.6, -0.3799999999999999), (-1.55, -0.3799999999999999), (-1.5, -0.3799999999999999), (-1.4500000000000002, -0.3799999999999999), (-1.4000000000000001, -0.3799999999999999), (-1.35, -0.3799999999999999), (-1.3, -0.33000000000000007), (-1.25, -0.33000000000000007), (-1.2000000000000002, -0.2799999999999998), (-1.1500000000000001, -0.2799999999999998), (-1.1, -0.2799999999999998), (-1.05, -0.2799999999999998), (-1.0, -0.22999999999999998), (-0.9500000000000002, -0.22999999999999998), (-0.8999999999999999, -0.17999999999999972), (-0.8500000000000001, -0.1299999999999999), (-0.8000000000000003, -0.1299999999999999), (-0.75, -0.08000000000000007), (-0.7000000000000002, -0.08000000000000007), (-0.6499999999999999, -0.029999999999999805), (-0.6000000000000001, -0.029999999999999805), (-0.5499999999999998, 0.020000000000000018), (-0.5, 0.020000000000000018), (-0.4500000000000002, 0.07000000000000028), (-0.3999999999999999, 0.1200000000000001), (-0.3500000000000001, 0.16999999999999993), (-0.2999999999999998, 0.2200000000000002), (-0.25, 0.27), (-0.20000000000000018, 0.3200000000000003), (-0.1499999999999999, 0.3200000000000003), (-0.10000000000000009, 0.3700000000000001), (-0.04999999999999982, 0.3700000000000001), (0.0, 0.3700000000000001), (0.04999999999999982, 0.3700000000000001), (0.10000000000000009, 0.3700000000000001), (0.1499999999999999, 0.3700000000000001), (0.20000000000000018, 0.3700000000000001), (0.25, 0.3700000000000001), (0.2999999999999998, 0.3700000000000001), (0.3500000000000001, 0.41999999999999993), (0.3999999999999999, 0.41999999999999993), (0.4500000000000002, 0.4700000000000002), (0.5, 0.4700000000000002), (0.5499999999999998, 0.4700000000000002), (0.6000000000000001, 0.52)]
        )
    
    ideal_on_map = [map_utilities.position_2_cell((val[0], val[1])) for val in ideal]
    plt.plot(*zip(*ideal_on_map), label="ideal path")

    plt.legend
    plt.show()

    
    

if __name__=="__main__":
    plot_planning()