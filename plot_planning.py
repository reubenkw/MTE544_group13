import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import matplotlib.ticker as ticker
import numpy as np
from utilities import FileReader
from mapUtilities import mapManipulator
import rclpy


def plot_planning(map_utilities, ideal, fname, ax: plt.Axes, title):
    width, height, max_value, pixels = map_utilities.read_pgm("room.pgm")
    map_data = np.array(pixels, dtype=np.uint8).reshape((height, width))
    
    # do way too much work to see distance on the x and y ticks
    ticks_x = ticker.FuncFormatter(lambda x, pos: '{0:.2f}'.format(map_utilities.cell_2_position((x, 0))[0]))
    ax.xaxis.set_major_formatter(ticks_x)

    ticks_y = ticker.FuncFormatter(lambda y, pos: '{0:.2f}'.format(map_utilities.cell_2_position((0, y))[1]))
    ax.yaxis.set_major_formatter(ticks_y)

    # plot map
    ax.imshow(map_data, cmap="gray", vmin=0, vmax=max_value)

    # plot origin
    origin = map_utilities.position_2_cell((0, 0))
    ax.scatter(*origin, label="Origin", c="purple")

    # plot actual path
    headers, values=FileReader(fname).read_file()
    values = np.array(values)

    real_on_map = [map_utilities.position_2_cell((val[0], val[1])) for val in values]
    ax.plot(*zip(*real_on_map), label="actual path")
    
    ideal_on_map = [map_utilities.position_2_cell((val[0], val[1])) for val in ideal]
    ax.plot(*zip(*ideal_on_map), label="ideal path")

    ax.scatter(*map_utilities.position_2_cell((values[0, 0], values[0, 1])), label="Start Point", c="red")
    ax.scatter(*map_utilities.position_2_cell((values[-1, 0], values[-1, 1])), label="End Point", c="green")

    ax.set_title(title)
    ax.set_xlabel("x [m]")
    ax.set_ylabel("y [m]")
    
    ax.grid()
    ax.legend()
    return ax


def main():
    # a really great way to store data
    ideals = [
        [(-2.0, -0.5299999999999998), (-1.9500000000000002, -0.5299999999999998), (-1.9000000000000001, -0.5299999999999998), (-1.85, -0.5299999999999998), (-1.8, -0.5299999999999998), (-1.75, -0.5299999999999998), (-1.7000000000000002, -0.5299999999999998), (-1.6500000000000001, -0.5299999999999998), (-1.6, -0.5299999999999998), (-1.55, -0.5299999999999998), (-1.5, -0.5299999999999998), (-1.4500000000000002, -0.5299999999999998), (-1.4000000000000001, -0.5299999999999998), (-1.35, -0.5299999999999998), (-1.3, -0.5299999999999998), (-1.25, -0.5299999999999998), (-1.2000000000000002, -0.5299999999999998), (-1.1500000000000001, -0.48), (-1.1, -0.48), (-1.05, -0.48), (-1.0, -0.48), (-0.9500000000000002, -0.48), (-0.8999999999999999, -0.48), (-0.8500000000000001, -0.48), (-0.8000000000000003, -0.48), (-0.75, -0.48), (-0.7000000000000002, -0.48), (-0.6499999999999999, -0.48), (-0.6000000000000001, -0.48), (-0.5499999999999998, -0.48), (-0.5, -0.48), (-0.4500000000000002, -0.48), (-0.3999999999999999, -0.48), (-0.3500000000000001, -0.43000000000000016), (-0.2999999999999998, -0.3799999999999999), (-0.25, -0.3799999999999999), (-0.20000000000000018, -0.3799999999999999), (-0.1499999999999999, -0.3799999999999999), (-0.10000000000000009, -0.3799999999999999), (-0.04999999999999982, -0.3799999999999999), (0.0, -0.3799999999999999), (0.04999999999999982, -0.3799999999999999), (0.10000000000000009, -0.3799999999999999), (0.1499999999999999, -0.33000000000000007), (0.20000000000000018, -0.33000000000000007), (0.25, -0.2799999999999998), (0.2999999999999998, -0.22999999999999998), (0.3500000000000001, -0.17999999999999972), (0.3999999999999999, -0.1299999999999999), (0.4500000000000002, -0.08000000000000007), (0.5, -0.029999999999999805), (0.5499999999999998, 0.020000000000000018), (0.6000000000000001, 0.07000000000000028), (0.6499999999999999, 0.1200000000000001), (0.7000000000000002, 0.16999999999999993), (0.7000000000000002, 0.2200000000000002), (0.75, 0.27), (0.7999999999999998, 0.3200000000000003), (0.8500000000000001, 0.3700000000000001), (0.8999999999999999, 0.41999999999999993), (0.9500000000000002, 0.4700000000000002), (1.0, 0.4700000000000002), (1.0499999999999998, 0.4700000000000002), (1.0999999999999996, 0.52)],
        [(1.0499999999999998, 0.4700000000000002), (1.0, 0.52), (0.9500000000000002, 0.5700000000000003), (0.8999999999999999, 0.6200000000000001), (0.8500000000000001, 0.6699999999999999), (0.7999999999999998, 0.7200000000000002), (0.75, 0.77), (0.7000000000000002, 0.8200000000000003), (0.6499999999999999, 0.8700000000000001), (0.6000000000000001, 0.9199999999999999), (0.5499999999999998, 0.9700000000000002), (0.5, 1.02), (0.4500000000000002, 1.0700000000000003), (0.3999999999999999, 1.12), (0.3999999999999999, 1.17), (0.3999999999999999, 1.2200000000000002), (0.3999999999999999, 1.27), (0.3999999999999999, 1.3200000000000003), (0.3500000000000001, 1.37), (0.2999999999999998, 1.42), (0.25, 1.4699999999999998), (0.20000000000000018, 1.5200000000000005), (0.1499999999999999, 1.5200000000000005), (0.10000000000000009, 1.5200000000000005), (0.04999999999999982, 1.5200000000000005), (0.0, 1.5200000000000005), (-0.04999999999999982, 1.5200000000000005), (-0.10000000000000009, 1.5200000000000005), (-0.1499999999999999, 1.5700000000000003), (-0.20000000000000018, 1.5700000000000003), (-0.25, 1.62), (-0.2999999999999998, 1.62), (-0.3500000000000001, 1.67), (-0.3999999999999999, 1.67), (-0.4500000000000002, 1.7199999999999998), (-0.5, 1.7199999999999998), (-0.5499999999999998, 1.7199999999999998), (-0.6000000000000001, 1.7700000000000005), (-0.6499999999999999, 1.7700000000000005), (-0.7000000000000002, 1.8200000000000003), (-0.75, 1.8200000000000003), (-0.8000000000000003, 1.87), (-0.8500000000000001, 1.87), (-0.8999999999999999, 1.92), (-0.9500000000000002, 1.92), (-1.0, 1.92), (-1.05, 1.9699999999999998)],
        [(-2.0, -0.5299999999999998), (-1.9500000000000002, -0.5299999999999998), (-1.9000000000000001, -0.5299999999999998), (-1.85, -0.5299999999999998), (-1.8, -0.5299999999999998), (-1.75, -0.5299999999999998), (-1.7000000000000002, -0.5299999999999998), (-1.6500000000000001, -0.5299999999999998), (-1.6, -0.5299999999999998), (-1.55, -0.5299999999999998), (-1.5, -0.5299999999999998), (-1.4500000000000002, -0.5299999999999998), (-1.4000000000000001, -0.5299999999999998), (-1.35, -0.5299999999999998), (-1.3, -0.5299999999999998), (-1.25, -0.5299999999999998), (-1.2000000000000002, -0.5299999999999998), (-1.1500000000000001, -0.5299999999999998), (-1.1, -0.5299999999999998), (-1.05, -0.5299999999999998), (-1.0, -0.5299999999999998), (-0.9500000000000002, -0.5299999999999998), (-0.8999999999999999, -0.5299999999999998), (-0.8500000000000001, -0.5299999999999998), (-0.8000000000000003, -0.5299999999999998), (-0.75, -0.5299999999999998), (-0.7000000000000002, -0.5299999999999998), (-0.6499999999999999, -0.5299999999999998), (-0.6000000000000001, -0.5299999999999998), (-0.5499999999999998, -0.5299999999999998), (-0.5, -0.5299999999999998), (-0.4500000000000002, -0.5299999999999998), (-0.3999999999999999, -0.5299999999999998), (-0.3500000000000001, -0.5299999999999998), (-0.2999999999999998, -0.5299999999999998), (-0.25, -0.5299999999999998), (-0.20000000000000018, -0.5299999999999998), (-0.1499999999999999, -0.5299999999999998), (-0.10000000000000009, -0.5299999999999998), (-0.04999999999999982, -0.5299999999999998), (0.0, -0.5299999999999998), (0.04999999999999982, -0.48), (0.10000000000000009, -0.43000000000000016), (0.1499999999999999, -0.3799999999999999), (0.20000000000000018, -0.33000000000000007), (0.25, -0.2799999999999998), (0.2999999999999998, -0.22999999999999998), (0.3500000000000001, -0.17999999999999972), (0.3999999999999999, -0.1299999999999999), (0.3999999999999999, -0.08000000000000007), (0.4500000000000002, -0.029999999999999805), (0.5, 0.020000000000000018), (0.5499999999999998, 0.07000000000000028), (0.6000000000000001, 0.1200000000000001), (0.6499999999999999, 0.16999999999999993), (0.7000000000000002, 0.2200000000000002), (0.75, 0.27), (0.7999999999999998, 0.3200000000000003), (0.8500000000000001, 0.3700000000000001), (0.8999999999999999, 0.41999999999999993), (0.9500000000000002, 0.4700000000000002)],
        [(0.8999999999999999, 0.41999999999999993), (0.8500000000000001, 0.41999999999999993), (0.7999999999999998, 0.41999999999999993), (0.75, 0.41999999999999993), (0.7000000000000002, 0.41999999999999993), (0.6499999999999999, 0.41999999999999993), (0.6000000000000001, 0.41999999999999993), (0.5499999999999998, 0.41999999999999993), (0.5, 0.41999999999999993), (0.4500000000000002, 0.41999999999999993), (0.3999999999999999, 0.41999999999999993), (0.3500000000000001, 0.41999999999999993), (0.2999999999999998, 0.41999999999999993), (0.25, 0.41999999999999993), (0.20000000000000018, 0.41999999999999993), (0.1499999999999999, 0.41999999999999993), (0.10000000000000009, 0.4700000000000002), (0.04999999999999982, 0.52), (0.0, 0.5700000000000003), (-0.04999999999999982, 0.6200000000000001), (-0.10000000000000009, 0.6699999999999999), (-0.1499999999999999, 0.7200000000000002), (-0.20000000000000018, 0.77), (-0.25, 0.8200000000000003), (-0.2999999999999998, 0.8700000000000001), (-0.3500000000000001, 0.9199999999999999), (-0.3999999999999999, 0.9700000000000002), (-0.3999999999999999, 1.02), (-0.3999999999999999, 1.0700000000000003), (-0.3999999999999999, 1.12), (-0.3999999999999999, 1.17), (-0.3999999999999999, 1.2200000000000002), (-0.3999999999999999, 1.27), (-0.3999999999999999, 1.3200000000000003), (-0.4500000000000002, 1.37), (-0.5, 1.42), (-0.5499999999999998, 1.4699999999999998), (-0.6000000000000001, 1.5200000000000005), (-0.6499999999999999, 1.5700000000000003), (-0.7000000000000002, 1.62), (-0.75, 1.67), (-0.8000000000000003, 1.7199999999999998), (-0.8500000000000001, 1.7700000000000005), (-0.8999999999999999, 1.8200000000000003), (-0.9500000000000002, 1.87), (-1.0, 1.92), (-1.05, 1.9699999999999998)]
    ]
    fnames = [
        "sim_test/euclidean0.csv",
        "sim_test/euclidean1.csv",
        "sim_test/manhattan0.csv",
        "sim_test/manhattan1.csv"
    ]
    titles = [
        "Euclidean Cost Path 0",
        "Euclidean Cost Path 1",
        "Manhattan Cost Path 0",
        "Manhattan Cost Path 1",
    ]

    rclpy.init()
    # laser sig value not used for plotting
    map_utils = mapManipulator(laser_sig=0.17)

    fig, axs = plt.subplots(2, 2, figsize=(8, 8))
    for ideal, fname, ax, title in zip(ideals, fnames, fig.get_axes(), titles):
        plot_planning(map_utils, np.array(ideal), fname, ax, title)

    fig.suptitle("Comparing A* Cost Functions")
    fig.tight_layout()
    plt.savefig("plot.png")


if __name__=="__main__":
    main()